import '../models/push_data.dart';
import '../models/person_info.dart';

class MockData {
  /// 获取模拟的推送数据
  static List<PushData> getMockPushData() {
    return [
      PushData(
        imgUrl: 'https://randomuser.me/api/portraits/men/1.jpg',
        name: '张三',
        serialNumber: 'SN001',
        objectId: 'obj001',
        eventId: 'evt001',
        dataType: 'person',
        recordType: 'capture',
        platformType: 'camera',
        portraitImage: PortraitImage(
          url: 'https://randomuser.me/api/portraits/men/1.jpg',
        ),
        panoramicImage: PanoramicImage(
          url: 'https://randomuser.me/api/portraits/men/1.jpg',
        ),
        capturedTime: DateTime.now().millisecondsSinceEpoch,
        receivedTime: DateTime.now().millisecondsSinceEpoch,
        createTime: DateTime.now().millisecondsSinceEpoch,
        viewInfo: ViewInfo(viewed: 0, confirmed: 0),
        score: 0.95,
        deviceInfo: DeviceInfo(
          device: Device(
            identifierId: 'dev001',
            deviceName: '摄像头1',
            deviceCode: 'CAM001',
            platformIdentifierId: 'plat001',
            platformType: 'camera',
            deviceType: 'ipc',
            position: '大厅',
            rtspAddress: 'rtsp://192.168.1.100:554/stream1',
            rtspDeputyAddress: 'rtsp://192.168.1.100:554/stream2',
          ),
          deviceGroup: DeviceGroup(
            identifierId: 'group001',
            name: '监控组1',
            mapUrl: '',
            mapWidth: 1920,
            mapHeight: 1080,
          ),
        ),
        taskInfo: TaskInfo(
          task: Task(
            taskId: 'task001',
            taskName: '人脸识别任务',
            taskType: 'face_detect',
            detectType: 'face',
          ),
          roi: Roi(
            ruleId: 'rule001',
            roiNum: 'roi001',
            roiName: '识别区域1',
            verticeList: [],
          ),
        ),
        stackeds: [],
        attrs: {},
        particular: Particular(
          score: 0.95,
          mask: 'no',
          helmet: 'no',
          associationId: 'assoc001',
          portraitDb: PortraitDb(
            portraitDbId: 1,
            identifierId: 'db001',
            libId: 'lib001',
            libImportType: 'manual',
            featureDbId: 'feature001',
            type: 1,
            name: '人员库1',
          ),
          portrait: Portrait(
            name: '张三',
            gender: '男',
            phone: '13800138000',
            company: '测试公司',
            dept: '技术部',
            employeeNumber: 'EMP001',
          ),
        ),
        applet: Applet(
          type: 1,
          face: Face(
            quality: 0.95,
            rectangle: Rectangle(vertices: []),
            trackId: 1,
            angle: Angle(yaw: 0, pitch: 0, roll: 0),
            landmarks: [],
            attributesWithScore: {},
            faceScore: 0.95,
            faceId: 'face001',
          ),
          portraitImageLocation: PortraitImageLocation(
            panoramicImageSize: PanoramicImageSize(width: 1920, height: 1080),
            portraitImageInPanoramic: PortraitImageInPanoramic(vertices: []),
            portraitInPanoramic: PortraitInPanoramic(vertices: []),
          ),
          objectId: 'obj001',
        ),
      ),
      PushData(
        imgUrl: 'https://randomuser.me/api/portraits/women/2.jpg',
        name: '李四',
        serialNumber: 'SN002',
        objectId: 'obj002',
        eventId: 'evt002',
        dataType: 'person',
        recordType: 'capture',
        platformType: 'camera',
        portraitImage: PortraitImage(
          url: 'https://randomuser.me/api/portraits/women/2.jpg',
        ),
        panoramicImage: PanoramicImage(
          url: 'https://randomuser.me/api/portraits/women/2.jpg',
        ),
        capturedTime: DateTime.now().millisecondsSinceEpoch,
        receivedTime: DateTime.now().millisecondsSinceEpoch,
        createTime: DateTime.now().millisecondsSinceEpoch,
        viewInfo: ViewInfo(viewed: 0, confirmed: 0),
        score: 0.92,
        deviceInfo: DeviceInfo(
          device: Device(
            identifierId: 'dev002',
            deviceName: '摄像头2',
            deviceCode: 'CAM002',
            platformIdentifierId: 'plat001',
            platformType: 'camera',
            deviceType: 'ipc',
            position: '走廊',
            rtspAddress: 'rtsp://192.168.1.101:554/stream1',
            rtspDeputyAddress: 'rtsp://192.168.1.101:554/stream2',
          ),
          deviceGroup: DeviceGroup(
            identifierId: 'group001',
            name: '监控组1',
            mapUrl: '',
            mapWidth: 1920,
            mapHeight: 1080,
          ),
        ),
        taskInfo: TaskInfo(
          task: Task(
            taskId: 'task001',
            taskName: '人脸识别任务',
            taskType: 'face_detect',
            detectType: 'face',
          ),
          roi: Roi(
            ruleId: 'rule001',
            roiNum: 'roi001',
            roiName: '识别区域1',
            verticeList: [],
          ),
        ),
        stackeds: [],
        attrs: {},
        particular: Particular(
          score: 0.92,
          mask: 'no',
          helmet: 'no',
          associationId: 'assoc002',
          portraitDb: PortraitDb(
            portraitDbId: 1,
            identifierId: 'db001',
            libId: 'lib001',
            libImportType: 'manual',
            featureDbId: 'feature001',
            type: 1,
            name: '人员库1',
          ),
          portrait: Portrait(
            name: '李四',
            gender: '女',
            phone: '13800138001',
            company: '测试公司',
            dept: '人事部',
            employeeNumber: 'EMP002',
          ),
        ),
        applet: Applet(
          type: 1,
          face: Face(
            quality: 0.92,
            rectangle: Rectangle(vertices: []),
            trackId: 2,
            angle: Angle(yaw: 0, pitch: 0, roll: 0),
            landmarks: [],
            attributesWithScore: {},
            faceScore: 0.92,
            faceId: 'face002',
          ),
          portraitImageLocation: PortraitImageLocation(
            panoramicImageSize: PanoramicImageSize(width: 1920, height: 1080),
            portraitImageInPanoramic: PortraitImageInPanoramic(vertices: []),
            portraitInPanoramic: PortraitInPanoramic(vertices: []),
          ),
          objectId: 'obj002',
        ),
      ),
      PushData(
        imgUrl: 'https://randomuser.me/api/portraits/men/3.jpg',
        name: '王五',
        serialNumber: 'SN003',
        objectId: 'obj003',
        eventId: 'evt003',
        dataType: 'person',
        recordType: 'capture',
        platformType: 'camera',
        portraitImage: PortraitImage(
          url: 'https://randomuser.me/api/portraits/men/3.jpg',
        ),
        panoramicImage: PanoramicImage(
          url: 'https://randomuser.me/api/portraits/men/3.jpg',
        ),
        capturedTime: DateTime.now().millisecondsSinceEpoch,
        receivedTime: DateTime.now().millisecondsSinceEpoch,
        createTime: DateTime.now().millisecondsSinceEpoch,
        viewInfo: ViewInfo(viewed: 0, confirmed: 0),
        score: 0.88,
        deviceInfo: DeviceInfo(
          device: Device(
            identifierId: 'dev001',
            deviceName: '摄像头1',
            deviceCode: 'CAM001',
            platformIdentifierId: 'plat001',
            platformType: 'camera',
            deviceType: 'ipc',
            position: '大厅',
            rtspAddress: 'rtsp://192.168.1.100:554/stream1',
            rtspDeputyAddress: 'rtsp://192.168.1.100:554/stream2',
          ),
          deviceGroup: DeviceGroup(
            identifierId: 'group001',
            name: '监控组1',
            mapUrl: '',
            mapWidth: 1920,
            mapHeight: 1080,
          ),
        ),
        taskInfo: TaskInfo(
          task: Task(
            taskId: 'task001',
            taskName: '人脸识别任务',
            taskType: 'face_detect',
            detectType: 'face',
          ),
          roi: Roi(
            ruleId: 'rule001',
            roiNum: 'roi001',
            roiName: '识别区域1',
            verticeList: [],
          ),
        ),
        stackeds: [],
        attrs: {},
        particular: Particular(
          score: 0.88,
          mask: 'no',
          helmet: 'no',
          associationId: 'assoc003',
          portraitDb: PortraitDb(
            portraitDbId: 1,
            identifierId: 'db001',
            libId: 'lib001',
            libImportType: 'manual',
            featureDbId: 'feature001',
            type: 1,
            name: '人员库1',
          ),
          portrait: Portrait(
            name: '王五',
            gender: '男',
            phone: '13800138002',
            company: '测试公司',
            dept: '财务部',
            employeeNumber: 'EMP003',
          ),
        ),
        applet: Applet(
          type: 1,
          face: Face(
            quality: 0.88,
            rectangle: Rectangle(vertices: []),
            trackId: 3,
            angle: Angle(yaw: 0, pitch: 0, roll: 0),
            landmarks: [],
            attributesWithScore: {},
            faceScore: 0.88,
            faceId: 'face003',
          ),
          portraitImageLocation: PortraitImageLocation(
            panoramicImageSize: PanoramicImageSize(width: 1920, height: 1080),
            portraitImageInPanoramic: PortraitImageInPanoramic(vertices: []),
            portraitInPanoramic: PortraitInPanoramic(vertices: []),
          ),
          objectId: 'obj003',
        ),
      ),
      PushData(
        imgUrl: 'https://randomuser.me/api/portraits/women/4.jpg',
        name: '陌生人',
        serialNumber: 'SN004',
        objectId: 'obj004',
        eventId: 'evt004',
        dataType: 'person',
        recordType: 'capture',
        platformType: 'camera',
        portraitImage: PortraitImage(
          url: 'https://randomuser.me/api/portraits/women/4.jpg',
        ),
        panoramicImage: PanoramicImage(
          url: 'https://randomuser.me/api/portraits/women/4.jpg',
        ),
        capturedTime: DateTime.now().millisecondsSinceEpoch,
        receivedTime: DateTime.now().millisecondsSinceEpoch,
        createTime: DateTime.now().millisecondsSinceEpoch,
        viewInfo: ViewInfo(viewed: 0, confirmed: 0),
        score: 0.75,
        deviceInfo: DeviceInfo(
          device: Device(
            identifierId: 'dev002',
            deviceName: '摄像头2',
            deviceCode: 'CAM002',
            platformIdentifierId: 'plat001',
            platformType: 'camera',
            deviceType: 'ipc',
            position: '走廊',
            rtspAddress: 'rtsp://192.168.1.101:554/stream1',
            rtspDeputyAddress: 'rtsp://192.168.1.101:554/stream2',
          ),
          deviceGroup: DeviceGroup(
            identifierId: 'group001',
            name: '监控组1',
            mapUrl: '',
            mapWidth: 1920,
            mapHeight: 1080,
          ),
        ),
        taskInfo: TaskInfo(
          task: Task(
            taskId: 'task001',
            taskName: '人脸识别任务',
            taskType: 'face_detect',
            detectType: 'face',
          ),
          roi: Roi(
            ruleId: 'rule001',
            roiNum: 'roi001',
            roiName: '识别区域1',
            verticeList: [],
          ),
        ),
        stackeds: [],
        attrs: {},
        particular: Particular(
          score: 0.75,
          mask: 'no',
          helmet: 'no',
          associationId: '',
          portraitDb: PortraitDb(
            portraitDbId: 0,
            identifierId: '',
            libId: '',
            libImportType: '',
            featureDbId: '',
            type: 0,
            name: '',
          ),
          portrait: Portrait(),
        ),
        applet: Applet(
          type: 1,
          face: Face(
            quality: 0.75,
            rectangle: Rectangle(vertices: []),
            trackId: 4,
            angle: Angle(yaw: 0, pitch: 0, roll: 0),
            landmarks: [],
            attributesWithScore: {},
            faceScore: 0.75,
            faceId: 'face004',
          ),
          portraitImageLocation: PortraitImageLocation(
            panoramicImageSize: PanoramicImageSize(width: 1920, height: 1080),
            portraitImageInPanoramic: PortraitImageInPanoramic(vertices: []),
            portraitInPanoramic: PortraitInPanoramic(vertices: []),
          ),
          objectId: 'obj004',
        ),
      ),
      PushData(
        imgUrl: 'https://randomuser.me/api/portraits/men/5.jpg',
        name: '已知人员',
        serialNumber: 'SN005',
        objectId: 'obj005',
        eventId: 'evt005',
        dataType: 'person',
        recordType: 'capture',
        platformType: 'camera',
        portraitImage: PortraitImage(
          url: 'https://randomuser.me/api/portraits/men/5.jpg',
        ),
        panoramicImage: PanoramicImage(
          url: 'https://randomuser.me/api/portraits/men/5.jpg',
        ),
        capturedTime: DateTime.now().millisecondsSinceEpoch,
        receivedTime: DateTime.now().millisecondsSinceEpoch,
        createTime: DateTime.now().millisecondsSinceEpoch,
        viewInfo: ViewInfo(viewed: 0, confirmed: 0),
        score: 0.98,
        deviceInfo: DeviceInfo(
          device: Device(
            identifierId: 'dev001',
            deviceName: '摄像头1',
            deviceCode: 'CAM001',
            platformIdentifierId: 'plat001',
            platformType: 'camera',
            deviceType: 'ipc',
            position: '大厅',
            rtspAddress: 'rtsp://192.168.1.100:554/stream1',
            rtspDeputyAddress: 'rtsp://192.168.1.100:554/stream2',
          ),
          deviceGroup: DeviceGroup(
            identifierId: 'group001',
            name: '监控组1',
            mapUrl: '',
            mapWidth: 1920,
            mapHeight: 1080,
          ),
        ),
        taskInfo: TaskInfo(
          task: Task(
            taskId: 'task001',
            taskName: '人脸识别任务',
            taskType: 'face_detect',
            detectType: 'face',
          ),
          roi: Roi(
            ruleId: 'rule001',
            roiNum: 'roi001',
            roiName: '识别区域1',
            verticeList: [],
          ),
        ),
        stackeds: [],
        attrs: {},
        particular: Particular(
          score: 0.98,
          mask: 'no',
          helmet: 'no',
          associationId: 'assoc005',
          portraitDb: PortraitDb(
            portraitDbId: 1,
            identifierId: 'db001',
            libId: 'lib001',
            libImportType: 'manual',
            featureDbId: 'feature001',
            type: 1,
            name: '人员库1',
          ),
          portrait: Portrait(
            name: '已知人员',
            gender: '男',
            phone: '13800138003',
            company: '测试公司',
            dept: '销售部',
            employeeNumber: 'EMP004',
          ),
        ),
        applet: Applet(
          type: 1,
          face: Face(
            quality: 0.98,
            rectangle: Rectangle(vertices: []),
            trackId: 5,
            angle: Angle(yaw: 0, pitch: 0, roll: 0),
            landmarks: [],
            attributesWithScore: {},
            faceScore: 0.98,
            faceId: 'face005',
          ),
          portraitImageLocation: PortraitImageLocation(
            panoramicImageSize: PanoramicImageSize(width: 1920, height: 1080),
            portraitImageInPanoramic: PortraitImageInPanoramic(vertices: []),
            portraitInPanoramic: PortraitInPanoramic(vertices: []),
          ),
          objectId: 'obj005',
        ),
      ),
      PushData(
        imgUrl: '',
        name: '无图人员',
        serialNumber: 'SN006',
        objectId: 'obj006',
        eventId: 'evt006',
        dataType: 'person',
        recordType: 'capture',
        platformType: 'camera',
        portraitImage: PortraitImage(url: ''),
        panoramicImage: PanoramicImage(url: ''),
        capturedTime: DateTime.now().millisecondsSinceEpoch,
        receivedTime: DateTime.now().millisecondsSinceEpoch,
        createTime: DateTime.now().millisecondsSinceEpoch,
        viewInfo: ViewInfo(viewed: 0, confirmed: 0),
        score: 0.65,
        deviceInfo: DeviceInfo(
          device: Device(
            identifierId: 'dev002',
            deviceName: '摄像头2',
            deviceCode: 'CAM002',
            platformIdentifierId: 'plat001',
            platformType: 'camera',
            deviceType: 'ipc',
            position: '走廊',
            rtspAddress: 'rtsp://192.168.1.101:554/stream1',
            rtspDeputyAddress: 'rtsp://192.168.1.101:554/stream2',
          ),
          deviceGroup: DeviceGroup(
            identifierId: 'group001',
            name: '监控组1',
            mapUrl: '',
            mapWidth: 1920,
            mapHeight: 1080,
          ),
        ),
        taskInfo: TaskInfo(
          task: Task(
            taskId: 'task001',
            taskName: '人脸识别任务',
            taskType: 'face_detect',
            detectType: 'face',
          ),
          roi: Roi(
            ruleId: 'rule001',
            roiNum: 'roi001',
            roiName: '识别区域1',
            verticeList: [],
          ),
        ),
        stackeds: [],
        attrs: {},
        particular: Particular(
          score: 0.65,
          mask: 'no',
          helmet: 'no',
          associationId: '',
          portraitDb: PortraitDb(
            portraitDbId: 0,
            identifierId: '',
            libId: '',
            libImportType: '',
            featureDbId: '',
            type: 0,
            name: '',
          ),
          portrait: Portrait(),
        ),
        applet: Applet(
          type: 1,
          face: Face(
            quality: 0.65,
            rectangle: Rectangle(vertices: []),
            trackId: 6,
            angle: Angle(yaw: 0, pitch: 0, roll: 0),
            landmarks: [],
            attributesWithScore: {},
            faceScore: 0.65,
            faceId: 'face006',
          ),
          portraitImageLocation: PortraitImageLocation(
            panoramicImageSize: PanoramicImageSize(width: 1920, height: 1080),
            portraitImageInPanoramic: PortraitImageInPanoramic(vertices: []),
            portraitInPanoramic: PortraitInPanoramic(vertices: []),
          ),
          objectId: 'obj006',
        ),
      ),
    ];
  }
}
